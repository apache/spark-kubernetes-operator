#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: apache-spark-app-generate
spec:
  rules:
    - name: generate-apache-spark-app
      match:
        all:
          - resources:
              kinds:
                - sparkoperator.k8s.io/v1beta2/SparkApplication
              operations:
                - CREATE
      context:
        - name: driverLabels
          variable:
            jmesPath: "items(request.object.spec.driver.labels || `{}`, 'key', 'value')"
        - name: driverLabelsConfValues
          variable:
            value: "{{ driverLabels | [].value }}"
        - name: driverLabelsConfKeys
          variable:
            value: "{{ map(&join('.', ['spark', 'kubernetes', 'driver', 'label', @]), driverLabels | [].key) }}"
        - name: driverLabelsConf
          variable:
            jmesPath: object_from_lists(driverLabelsConfKeys, driverLabelsConfValues)
        - name: jobName
          variable:
            value: "{{request.object.metadata.name}}"
            jmesPath: 'to_string(@)'
        - name: sparkVersion
          variable:
            value: "{{request.object.spec.sparkVersion}}"
            jmesPath: 'to_string(@)'
        - name: dynamicAllocationEnabledConf
          variable:
            jmesPath: '{"spark.dynamicAllocation.enabled": to_string(`{{request.object.spec.dynamicAllocation.enabled || false}}`)}'
        - name: executorInstancesContains
          variable:
            jmesPath: "`{{request.object.spec.executor.instances || `0`}}` != `0`"
        - name: executorInstancesConf
          variable:
            jmesPath: '[{"key": `true`, "value": {"spark.executor.instances": to_string(`{{request.object.spec.executor.instances || "foo"}}`)}}, {"key": `false`, "value": `{}`}][?key==`{{executorInstancesContains}}`]|[0].value'
        - name: sparkContainerImageConf
          variable:
            value:
              spark.kubernetes.container.image: "{{ request.object.spec.image }}"
        - name: sparkK8sDriverServiceAccountConf
          variable:
            value:
              spark.kubernetes.authenticate.driver.serviceAccountName: "{{request.object.spec.driver.serviceAccount}}"
        - name: sparkConf
          variable:
            jmesPath: request.object.spec.sparkConf
            default: {}
        - name: sparkConf
          variable:
            jmesPath: merge(sparkConf, sparkK8sDriverServiceAccountConf, sparkContainerImageConf,
              driverLabelsConf, executorInstancesConf)
      generate:
        kind: SparkApplication
        apiVersion: spark.apache.org/v1alpha1
        name: "{{ request.object.metadata.name }}"
        namespace: "{{ request.object.metadata.namespace }}"
        data:
          kind: SparkApplication
          apiVersion: spark.apache.org/v1alpha1
          metadata:
            ownerReferences:
              - apiVersion: sparkoperator.k8s.io/v1beta2
                kind: SparkApplication
                name: "{{request.object.metadata.name}}"
                uid: "{{request.object.metadata.uid}}"
            name: "{{ request.object.metadata.name }}"
            namespace: "{{ request.object.metadata.namespace }}"
          spec:
            mainClass: "{{ request.object.spec.mainClass }}"
            jars: "{{ request.object.spec.mainApplicationFile }}"
            driverArgs: "{{ request.object.spec.arguments }}"
            sparkConf:
              "{{ sparkConf }}"
            runtimeVersions:
              sparkVersion: "{{ sparkVersion }}"