/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
buildscript {
  repositories {
    maven {
      url = uri("https://plugins.gradle.org/m2/")
    }
  }
  dependencies {
    classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotBugsGradlePluginVersion}"
    classpath "com.diffplug.spotless:spotless-plugin-gradle:${spotlessPluginVersion}"
    classpath "com.github.johnrengelman:shadow:${shadowJarPluginVersion}"
  }
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is " +
    "required"

allprojects {
  group = "org.apache.spark.k8s.operator"
  version = "0.1.0"
}

subprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'java'

  java {
    sourceCompatibility = 17
    targetCompatibility = 17
  }

  repositories {
    mavenCentral()
  }

  apply plugin: 'checkstyle'
  checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    showViolations = true
  }

  apply plugin: 'pmd'
  pmd {
    ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
    toolVersion = pmdVersion
    consoleOutput = true
    ignoreFailures = false
  }

  apply plugin: 'com.github.spotbugs'
  spotbugs {
    toolVersion = spotBugsVersion
    afterEvaluate {
      reportsDir = file("${project.reporting.baseDir}/findbugs")
    }
    excludeFilter = file("$rootDir/config/spotbugs/spotbugs_exclude.xml")
    ignoreFailures = false
  }

  apply plugin: 'jacoco'
  jacoco {
    toolVersion = jacocoVersion
  }
  jacocoTestReport {
    dependsOn test
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    java {
      endWithNewline()
      googleJavaFormat('1.22.0')
      importOrder(
        'java',
        'javax',
        'scala',
        '',
        'org.apache.spark',
      )
      toggleOffOn()
      targetExclude "**/BaseResource.java"
      trimTrailingWhitespace()
      removeUnusedImports()
    }
    format 'misc', {
      target '*.md', '*.gradle', '**/*.properties', '**/*.xml', '**/*.yaml', '**/*.yml'
      endWithNewline()
      trimTrailingWhitespace()
    }
  }
}

apply from: 'deploy.gradle'
